// SPDX-License-Identifier: GPL-3.0


pragma solidity ^0.8.0;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/utils/SafeERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/token/ERC20/IERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/utils/math/SafeMath.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v4.5/contracts/access/Ownable.sol";


contract brDAI is ERC20, Ownable {
    
    address public brBOI; // address of the other contract - the one with the public BRRRRR function


    constructor() ERC20("brDAI", "brDAI"){ 
        brBOI = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // "random" address, simply defining it rn
    }
    
    function setBRBOI(address _addy) public onlyOwner{ //redefine the address to actually be that contract
        brBOI = _addy;
    }

    //Bro no cap, dont let this address be accessable by anyone but the inherited contract
    //Also this can mint indefinite brDAI tokens with no cap, no cap.
    function _brDAI(address receiver, uint256 amount) public { 

         require(msg.sender == brBOI);
        _mint(receiver, amount);
    }


}

interface IbrDAI {
    function _brDAI(address, uint256) external;
}



//CHANGE THE INHERITANCE TO MAKE THIS CONTRACT INDEPENDENT - 
//we will deploy this contract, then use it's address to lock the brDAI contract's minting function
//to this contract's address 
contract brrDAI is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20; 

    
    address charity; // address to be used to send money to a charity wallet

    address brDAIAddy; // address of the ERC20 contract

    event Withdrawal(
        address indexed token,
        uint256 indexed amount,
        address indexed to
   );

    event IForgotWhyThisExists(
        IERC20 indexed token,
        uint256 indexed amount,
        address indexed to
   );


    constructor() {
        //We will change this address to an actual charities address
        charity = address(this);
        brDAIAddy = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // "random" address
    }

  
   //Change the brDAIAddy (use this to set the actual ERC20 address)
   function changebrDAIAddy(address newAddy) public onlyOwner {
       brDAIAddy = newAddy; 
   }
   


   
   //Write function to forcefeed people into sending DAI to mint brrrrDai
    function brrr(IERC20 token, uint256 amount) public {
        //transfer a token, to the charity address, with the called amount
        //write some code to make this token have to be DAI

        //USE TRANSFERFROM FUCKING IDIOT BRO
        //safeTransferFrom....sender....receiver...amount
         IERC20(token).safeTransferFrom(msg.sender, charity, amount);
          
          //mint some nice juicy BRRRRRRRRR BRRRRRRRRTTTTTAATATAT BRRRRRRR for the msg.sender
          //Use the interface to run the brDAI function on the specified address. 
          //msg.sender is the receiver of the _brDAI function. amount they receive is the amount they put in
         IbrDAI(brDAIAddy)._brDAI(msg.sender, amount);
          
         //I dont remember why emits are important but all IERC20 Safetransfer examples include it.
         //Nevermind: this is an event emiting what token was BRRRRRATATATA'ed, how much of it and who BRRRRRSRRARARARARA
         //RRARATATATATATAT
        emit IForgotWhyThisExists (token, amount, msg.sender);
    }
    
}

