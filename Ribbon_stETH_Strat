// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

contract Ribbon_stETH_Covered_Calls {
    address TRIBE_Treasury;
    IRibbon Ribbon_IR;
  //IRibbonThetaSTETHVault Ribbon_TSV; Interfacing with the same contract is pointless
    
    constructor() {
        TRIBE_Treasury = 0x7E3Ee99EC9b2aBd42c8c8504dc8195C8dc4942D0; // currently my testnet address - Change to Tribe_DAO Address
        //I AM THE TRIBE
        Ribbon_IR = IRibbon(0x53773E034d9784153471813dacAFF53dBBB78E8c); // Ribbon 
    }

    // modifier to check if caller is the Tribe DAO or not
    modifier isTribeDAO() {
        require(msg.sender == TRIBE_Treasury, "You aren't part of the tribe...");
        _;
    }


    //Write a function...
    
}

//NOTES TO MYSELF:

  //Process for depositing Ribbon:
            //DepositETH - uses IRibbon interface
            //Call a function to find out how many shares we receive from Depositing.
            //stake - staking those shares - IRibbon
            //This function takes the shares that the caller has inside the vault and 
                   //This function is called by the user:
                   //First it calls an approval for rstETH-Theta to be transferred
                   //Then it sends the rstETH-Theta to the Liquidity-Gauge using the ILiquidityGauge deposit function
                   //Finally, rstETH-Theta-Gauge is sent to the caller.
           

    //Process for withdrawing shit:
                   // Ribbon's contract for staking rstETH-Theta into rst-ETH-Theta-Gauge is an independent Vyper contract. You can stake off of the primary rstETH-Theta 
                   //contract but you cannot withdraw without interacting with the THETA-GAUGE contract.
                      //`Withdraw` called on rstETH-Theta-Gauge - IrstETH-Theta-Gauge
                                    //This function is called by the caller contract to interact with the rstETH-Theta-Gauge contract.
                                    //The caller contract is then sent rstETH-Theta
                                    //The rstETH-Theta-Gauge is then burned to 0x000
                  //Now our rstETH-Theta-Gauge is no longer tied up.
                  //move onto the two-step process of withdrawing from the main pool:
                       //Initializewithdraw - this is not the correct name: need to get into explaining this
                       //CompleteWithdraw - correct name: need to get into explaining this
                             // I've figured it out....need to finish typing this out.





interface IRibbon {

  
}

//interface IrstETH-Theta-Gauge {
     //this contract is written in Vyper.....oh fuck me
//}
